{"version":3,"sources":["Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","d","Date","className","getDay","getDate","getMonth","temp","description","wind_speed","Pressure","humidity","App","useState","city","setCity","Temp","setTemp","Description","setDescription","region","setRegion","country","setCountry","Humidity","setHumidity","setPressure","wind","setWind","day1","setday1","getWeather","e","a","preventDefault","value","target","elements","place","toUpperCase","slice","fetch","apiCall","json","response","console","log","apiCallopen","responseopen","location","name","current","temperature","weather_descriptions","pressure","list","main","alert","onSubmit","type","placeholder","required","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db82bbc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style/Weather.css';\r\n\r\nfunction Weather(props) {\r\n\r\n    const d = new Date();\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return (\r\n        <div className=\"Conatiner\">\r\n            <div className=\"weather_container\">\r\n            <p>{days[d.getDay()]} {d.getDate()} {months[d.getMonth()]}</p>\r\n            <div className=\"temp\">\r\n                <h2>{props.temp}&deg; C</h2>\r\n                <p>{props.description}</p>\r\n            </div>\r\n           <div className=\"extra\">\r\n            <div className=\"ineer_extra\">\r\n                <h3>Wind Speed (Km/hr)</h3>\r\n                <h4>{props.wind_speed}</h4>\r\n            </div>\r\n            <div className=\"ineer_extra\">\r\n                <h3>Pressure(milibar)</h3>\r\n                <h4>{props.Pressure}</h4>\r\n            </div>\r\n            <div className=\"ineer_extra\">\r\n                <h3>Humidity(%)</h3>\r\n                <h4>{props.humidity}</h4>\r\n            </div>\r\n           </div>\r\n            \r\n            </div>\r\n            \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Weather;\r\n","import React,{ useState } from 'react';\nimport './App.css';\nimport Weather from './Components/Weather';\n\nfunction App() {\n  \n  const api_key1 = '67f94c257752c42dc55cb2a3ad6d0177';\n  const api_key = '9337a55ff893c9f7dbbaa956a24f80d1';\n  const [city, setCity] = useState('');\n  const [Temp, setTemp] = useState('');\n  const [Description, setDescription] = useState('');\n  const [region , setRegion] = useState('');\n  const [country, setCountry] = useState('');\n  const [Humidity , setHumidity] = useState('');\n  const [Pressure , setPressure] = useState(\"\");\n  const [wind , setWind] = useState('');\n  const [day1,setday1] = useState();\n\n  // const calTemp = (temp) => {\n  //   return Math.floor(temp - 273.15);\n  // };\n\n  \n\n  // api call\n  const getWeather = async (e) => {\n    e.preventDefault();\n\n    const value = e.target.elements.place.value;\n    const place = value[0].toUpperCase() +  value.slice(1); \n    \n\n    // sweather stack api\n\n    const apiCall = await fetch(\n      'http://api.weatherstack.com/current?access_key=' + api_key1 + '&query=' + place\n    );\n    const response = await apiCall.json();\n    console.log(response);\n\n\n      // openweather api\n\n      const apiCallopen = await fetch(\n        'https://api.openweathermap.org/data/2.5/forecast?q='+place +'&appid=' +api_key\n      )\n      const responseopen = await apiCallopen.json();\n      \n      console.log(responseopen);\n      \n\n\n\n    if(place === response.location.name){\n      setCity(response.location.name);\n      setTemp(response.current.temperature);\n      setDescription(response.current.weather_descriptions[0]);\n      setCountry(response.location.country);\n      setRegion(response.location.region);\n      setHumidity(response.current.humidity);\n      setWind(response.current.wind_speed);\n      setPressure(response.current.pressure);\n      setday1(responseopen.list[1].main.temp);\n    }\n    else{\n      alert(\"Please enter a valid city name!\");\n    }\n    \n    console.log(day1);\n   \n  };\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Weather App</h1>\n        <form onSubmit={getWeather}>\n          <input type=\"text\" placeholder=\"Enter City Name\" name=\"place\" required/>\n          <input type=\"submit\" value=\"Get Weather\"/>\n        </form>\n        \n        {city?\n          <>\n          <h5>{city}</h5>\n          <p>{region} , {country}</p>\n          <Weather \n          city={city}\n          temp={Temp}\n          description={Description}\n          country={country}\n          region={region}\n          Pressure={Pressure}\n          humidity={Humidity}\n          wind_speed={wind}\n        />\n        </>:\"\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n// 'https://api.openweathermap.org/data/2.5/weather?q=' +\n      //   place +\n      //   '&appid=' +\n      //   api_key\n\n\n      //http://api.weatherstack.com/current?access_key=67f94c257752c42dc55cb2a3ad6d0177&query=Bangalore","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}